scalar Date

type Query {
  getUser: User!
  getEvent(eventId: ID!): Event!
}

type Mutation {
  login(idToken: String!): AuthPayload!
  createEvent(
    name: String!
    description: String!
    location: String!
    startDate: Date!
    endDate: Date!
  ): Event!
  updateEvent(
    eventId: ID!
    name: String!
    description: String!
    location: String!
    startDate: Date!
    endDate: Date!
  ): Event!
  updateEvents(
    events: [EventInput!]!
  ): [Event]!
  addAttendees(
    eventId: ID!
    attendees: [AttendeeInput!]!
  ): [Attendee]!
  updateAttendee(
    eventId: ID!
    attendeeId: ID!
    active: Boolean
    attended: Boolean
    selectable: Boolean
  ): Attendee!
  updateAttendees(
    eventId: ID!
    attendees: [UpdateAttendeeInput!]!
  ): [Attendee]!
  sendInvitations(
    eventId: ID!
  ): Event!
  readInvitation(
    qrCodeKey: String!
  ): Attendee!
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  _id: ID!
  name: String!
  email: String!
  profilePicture: String!
  active: Boolean!
  events: [Event!]!
  createdAt: Date!
  updatedAt: Date!
}

type Event {
  _id: ID!
  name: String!
  description: String!
  location: String!
  startDate: Date!
  endDate: Date!
  active: Boolean!
  attendance: [Attendee!]!
  createdAt: Date!
  updatedAt: Date!
}

type Attendee {
  _id: ID!
  email: String!
  active: Boolean!
  attended: Boolean!
  invited: Boolean!
  createdAt: Date!
  updatedAt: Date!
  selectable: Boolean!
}

input UpdateAttendeeInput {
  _id: ID!
  active: Boolean,
  selectable: Boolean,
}

input AttendeeInput {
  email: String!
}

input EventInput {
  _id: ID!
  name: String
  description: String
  location: String
  startDate: Date
  endDate: Date
  active: Boolean
}
